generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model blogs {
  id         Int          @id @default(autoincrement())
  title      String       @db.VarChar(255)
  content    String       @db.Text
  author     String?      @db.VarChar(100)
  created_at DateTime?    @default(now()) @db.Timestamp(0)
  image_url  String?      @db.VarChar(500)
  likes      Int          @default(0)
  views      Int          @default(0)
  blog_tags  blogs_tags[]
}

model tags {
  id        Int          @id @default(autoincrement())
  name      String       @unique @db.VarChar(50)
  blog_tags blogs_tags[]
}

model blogs_tags {
  blog_id Int
  tag_id  Int
  blog    blogs @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  tag     tags  @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([blog_id, tag_id])
  @@index([tag_id], map: "blogs_tags_tag_id_fkey")
}

model events {
  id                     Int                   @id @default(autoincrement())
  title                  String                @db.VarChar(255)
  description            String                @db.Text
  full_description       String?               @db.Text
  start_date             DateTime              @db.Date
  end_date               DateTime?             @db.Date
  start_time             String?               @db.VarChar(10)
  end_time               String?               @db.VarChar(10)
  location               String                @db.VarChar(255)
  target_audience        String                @db.VarChar(100)
  max_participants       Int?
  current_participants   Int                   @default(0)
  status                 String                @default("upcoming") @db.VarChar(20)
  event_type             String                @db.VarChar(50)
  priority               String                @default("normal") @db.VarChar(20)
  is_mandatory           Boolean               @default(false)
  is_online              Boolean               @default(false)
  organizer              String                @db.VarChar(255)
  contact_info           String?               @db.VarChar(500)
  requirements           String?               @db.Text
  what_to_bring          String?               @db.Text
  note                   String?               @db.Text
  image_url              String?               @db.VarChar(500)
  registration_required  Boolean               @default(false)
  registration_deadline  DateTime?             @db.Timestamp(0)
  created_at             DateTime              @default(now()) @db.Timestamp(0)
  updated_at             DateTime              @updatedAt @db.Timestamp(0)
  likes                  event_likes[]
  registrations          event_registrations[]
  tags                   event_tags[]
  student_participations student_events[]

  @@map("events")
}

model event_tags {
  id       Int    @id @default(autoincrement())
  event_id Int
  tag_name String @db.VarChar(50)
  event    events @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([event_id], map: "event_tags_event_id_fkey")
  @@map("event_tags")
}

model event_registrations {
  id            Int      @id @default(autoincrement())
  event_id      Int
  student_id    String?  @db.VarChar(20)
  student_name  String   @db.VarChar(100)
  student_email String   @db.VarChar(255)
  student_phone String?  @db.VarChar(20)
  major         String?  @db.VarChar(100)
  semester      String?  @db.VarChar(20)
  class_code    String?  @db.VarChar(20)
  registered_at DateTime @default(now()) @db.Timestamp(0)
  status        String   @default("registered") @db.VarChar(20)
  notes         String?  @db.Text
  event         events   @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([event_id], map: "event_registrations_event_id_fkey")
  @@map("event_registrations")
}

model event_likes {
  id       Int    @id @default(autoincrement())
  event_id Int
  user_ip  String @db.VarChar(45)
  event    events @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@unique([event_id, user_ip])
  @@map("event_likes")
}

model event_categories {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(50)
  description String @db.VarChar(255)
  color       String @db.VarChar(20)
  icon        String @db.VarChar(50)

  @@map("event_categories")
}

model academic_calendar {
  id          Int       @id @default(autoincrement())
  semester    String    @db.VarChar(20)
  event_name  String    @db.VarChar(255)
  start_date  DateTime  @db.Date
  end_date    DateTime? @db.Date
  description String?   @db.Text
  is_holiday  Boolean   @default(false)
  created_at  DateTime  @default(now()) @db.Timestamp(0)

  @@map("academic_calendar")
}

model students {
  id                   Int                 @id @default(autoincrement())
  student_id           String              @unique @db.VarChar(20)
  name                 String              @db.VarChar(100)
  email                String              @unique @db.VarChar(255)
  phone                String?             @db.VarChar(20)
  parent_name          String?             @db.VarChar(100)
  parent_phone         String?             @db.VarChar(20)
  department           String              @db.VarChar(100)
  contact_status       String              @default("pending") @db.VarChar(20)
  insurance_status     String              @default("pending") @db.VarChar(20)
  address              String?             @db.Text
  notes                String?             @db.Text
  avatar_url           String?             @db.VarChar(500)
  status               String              @default("active") @db.VarChar(20)
  created_at           DateTime            @default(now()) @db.Timestamp(0)
  updated_at           DateTime            @updatedAt @db.Timestamp(0)
  document_submissions student_documents[]
  event_participations student_events[]

  @@map("students")
}

model student_events {
  id                   Int       @id @default(autoincrement())
  student_id           Int
  event_id             Int
  participation_status String    @default("not_registered") @db.VarChar(20)
  registered_at        DateTime? @db.Timestamp(0)
  registration_note    String?   @db.Text
  contact_info         String?   @db.VarChar(255)
  created_at           DateTime  @default(now()) @db.Timestamp(0)
  updated_at           DateTime  @updatedAt @db.Timestamp(0)
  event                events    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  student              students  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, event_id])
  @@index([event_id], map: "student_events_event_id_fkey")
  @@map("student_events")
}

model student_documents {
  id                Int       @id @default(autoincrement())
  student_id        Int
  document_type     String    @db.VarChar(100)
  document_name     String    @db.VarChar(255)
  description       String?   @db.Text
  submission_status String    @default("not_submitted") @db.VarChar(20)
  submitted_at      DateTime? @db.Timestamp(0)
  deadline          DateTime? @db.Date
  is_required       Boolean   @default(false)
  file_url          String?   @db.VarChar(500)
  notes             String?   @db.Text
  created_at        DateTime  @default(now()) @db.Timestamp(0)
  updated_at        DateTime  @updatedAt @db.Timestamp(0)
  student           students  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id], map: "student_documents_student_id_fkey")
  @@map("student_documents")
}
